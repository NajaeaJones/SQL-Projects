# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

CREATE TABLE Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
song_key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
song_mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness decimal(8,7) NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL )


#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

--Which TOP 12 songs have the loudest volumes and are also the most danceable?

SELECT  ARTIST_NAME, TRACK_NAME,MAX(LOUDNESS), MAX(DANCEABILITY)
    FROM Spotifydata
    GROUP BY ARTIST_NAME, TRACK_NAME
    LIMIT 12;


--WHICH TOP 5 ARTIST ARE THE MOST POPULAR ON SPOTIFY?

SELECT ARTIST_NAME, TRACK_NAME, MAX(POPULARITY)
    FROM Spotifydata
    GROUP BY ARTIST_NAME, TRACK_NAME, POPULARITY
    ORDER BY POPULARITY DESC
    LIMIT 5;

--SELECT EACH ARTIST AND THE NAME OF SONGS THEY HAVE

SELECT ARTIST_NAME, TRACK_NAME
    FROM Spotifydata    
    GROUP BY TRACK_NAME;

-- SELECT EACH ARTIST WITH THE AVERAGE OF ALL THEIR SONGS POPULARITY
SELECT ARTIST_NAME,TRACK_NAME, AVG(POPULARITY)
    FROM Spotifydata    
    GROUP BY TRACK_NAME; 
    
-- SELECT THE TOP 3 MOST POPULAR SONGS AND THE ARTIST WHO SINGS THEM.
SELECT TRACK_NAME, MAX(POPULARITY), ARTIST_NAME
    FROM Spotifydata    
    GROUP BY ARTIST_NAME
    LIMIT 3;
    
-- SELECT EVERY TRACK, ORDERED BY ARTIST ASCENDING AND POPULARITY DESCENDING
SELECT TRACK_NAME, ARTIST_NAME
    FROM Spotifydata    
    ORDER BY ARTIST_NAME ASC, POPULARITY DESC
